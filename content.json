[{"title":"记录 hexo + github pages 搭建博客过程","date":"2019-03-13T16:00:00.000Z","path":"2019/03/14/hexo/","text":"一直想搞个博客，总是被各种事情阻扰，然后继续被搁置着。现在闲了，终于决定自己动手做一个。本文主要记录使用 hexo + github pages 搭建博客的过程及遇到的一些小问题（cu xin）。 背景为什么用 hexo + github pages？hexo: 一个快速、简洁且高效的博客框架，目前拥有 288 个插件以及 246 个主题可供选择。github pages：由 github 提供的一项功能，可以创建一个专属域名来展示自己的一些项目，考虑到域名备案还是比较麻烦，所以还是选择了这个。 准备工作 确保已经下载安装了 Node 以及 git 安装 Hexo 1npm i -g hexo-cli 新建一个 github 仓库，利用这个仓库来使用 github pages功能 建立本地和远程仓库的关联 创建 ssh，id_rsa 是个人电脑上的私人密钥，id_rsa.pub 是公共密钥，将公共密钥放到 github 上，这样连接 github 账户时，就会根据公钥来匹配电脑上的私钥，相互匹配时，才能顺利通过 git 上传文件到 github 上。 可以先检查本机是否已经存在 ssh。 12cd ~/. sshls 若不存在，则创建: 12ssh-keygen -t rsa -C \"youremail\"Enter file in which to save the key # 输入用于保存生成的SSH key的文件名，按回车则使用默认的 将 id_rsa.pub 文件中的密钥复制到 github -&gt; settings -&gt; SSH and GPGkeys -&gt; New SSH key 中 验证是否关联成功（注意：这个就是 git@github.com，不要把 git 换成自己的 username），显示 hi, your username 就说明成功了 1ssh -T git@github.com 创建博客项目这里可以选择先创建一个博客文件夹，再进入到这个文件夹执行命令 hexo init，也可以在指定文件夹中 hexo init blogname，我跟着网上的教程走，也没仔细看，就跟着复制粘贴，就出现了一个问题：我先新建了一个 myblog 文件夹，然后进入到这个文件夹执行了上面的指令后初始化 hexo init myblog，直接打开了外面的myblog，没有注意到刚才的指令其实是在 myblog 里面又创建了一个 myblog，所以在外面的 myblog 文件夹中就只有三个指令 —— init，help，version，到里面的myblog才会有 generate、server 等属性（所以说还是要动动脑子，不要只去复制粘贴）。 init后会出现一个目录： 12345678.├── _config.yml # 配置文件├── package.json├── scaffolds # 模板文件夹├── source # 资源文件夹| ├── _drafts # 草稿箱| └── _posts # 发布└── themes # 主题文件夹 根据自己的需求去修改配置文件中的信息。 主题主题可以自行去[官网]（https://hexo.io/themes/）寻找自己喜欢的，本人更喜欢简约一点的，所以选择了 yilia。 1git clone https://github.com/litten/hexo-theme-yilia.git 将主题下载下来后放到 themes 目录中，再将站点中 _config.yml 的 theme 属性改成新添加的主题名。 1hexo s 这样就可以看到效果了。在 themes/新添加的主题 目录下也会有个 _config.yml，在里面可以根据个人的需求来调整，具体见这里。 要特别说一下的是，如果要使用首页只显示前几行的话可以在文章中通过 &lt;!-- more --&gt; 来自定义自己想在首页显示的内容，并且需要将主题配置文件中的 excerpt_link: more 注释掉，并且要注意的是文章中 &lt;!-- more --&gt; 上面需要有内容（注释掉的也可以），否则会发现文章又显示全部内容了。 live2d 动画已经记不得是在哪个博客中看到了 live2d，觉得很可爱，就想着也加一个。 先下载 live2d 包 1npm i --save hexo-helper-live2d 选择自己喜欢的模型 1npm i --save live2d-widget-model-模型名 在站点的 _config.yml 中添加配置信息,将 model 改为你选择的模型包名 123456789101112131415161718192021live2d:enable: truescriptFrom: localpluginRootPath: live2dw/pluginJsPath: lib/pluginModelPath: assets/tagMode: falsedebug: falsemodel: use: live2d-widget-model-tororodisplay: position: right width: 100 height: 200 hOffset: 30 vOffset: -60mobile: show: truereact: opacityDefault: 1 opacityOnHover: 0.7 可以根据自己想要的样子去调整一些属性，如位置、透明度等，详细见这里。 评论系统评论系统我使用了 Valine，为什么选择它 —— 好吧，我完全只是喜欢它的颜值而已。看了我使用的 yilia 主题，发现配置文件中只有多说、网易云跟帖、畅言、Disqus、Gitment这五种评论系统可以配置，就去 github 上看一下，发现在2017年的时候就新增了对 Valine 的支持，使用如下： 注册 Leancloud，创建应用 在站点的 _config.yml 中增加配置信息，appId和 appKey 可以在 创建的应用 -&gt; 设置 -&gt; 应用 key 中找到。 12345678#6、Valine https://valine.js.orgvaline: appid: #Leancloud应用的appIdappkey: #Leancloud应用的appKeyverify: false #验证码notify: false #评论回复提醒avatar: mm #评论列表头像样式：''/mm/identicon/monsterid/wavatar/retro/hideplaceholder: Just go go #评论框占位符 在主题中的 layout/_partial/article.ejs 中添加代码（注意：要加在 &lt;% if (!index &amp;&amp; post.comments){ %&gt; 后 面，否则会出现首页也出现评论框的问题）。 12345678910111213&lt;% if (theme.valine &amp;&amp; theme.valine.appid &amp;&amp; theme.valine.appkey)&#123; %&gt;&lt;section id=\"comments\" class=\"comments\"&gt; &lt;style&gt; .comments&#123;margin:30px;padding:10px;background:#fff&#125; @media screen and (max-width:800px)&#123;.comments&#123;margin:auto;padding:10px;background:#fff&#125;&#125; &lt;/style&gt; &lt;%- partial('post/valine', &#123; key: post.slug, title: post.title, url: config.url+url_for(post.path) &#125;) %&gt;&lt;/section&gt;&lt;% &#125; %&gt; 添加 layout/_partial/post/valine.ejs 文件，文件内容如下: 123456789101112131415161718&lt;div id=\"vcomment\" class=\"comment\"&gt;&lt;/div&gt;&lt;script src=\"//cdn1.lncld.net/static/js/3.0.4/av-min.js\"&gt;&lt;/script&gt;&lt;script src=\"//unpkg.com/valine/dist/Valine.min.js\"&gt;&lt;/script&gt;&lt;script&gt; var notify = '&lt;%= theme.valine.notify %&gt;' == true ? true : false; var verify = '&lt;%= theme.valine.verify %&gt;' == true ? true : false; window.onload = function() &#123; new Valine(&#123; el: '#vcomment', notify: notify, verify: verify, app_id: \"&lt;%= theme.valine.appid %&gt;\", app_key: \"&lt;%= theme.valine.appkey %&gt;\", placeholder: \"&lt;%= theme.valine.placeholder %&gt;\", avatar:\"&lt;%= theme.valine.avatar %&gt;\" &#125;); &#125;&lt;/script&gt; 开启智能菜单中所有文章及标签的搜索 下载 hexo-generator-json-content 包 1npm i --save hexo-generator-json-content 在站点的 _config.yml 中添加配置信息 123456789101112131415161718jsonContent:meta: falsepages: falseposts:title: truedate: truepath: truetext: trueraw: falsecontent: falseslug: falseupdated: falsecomments: truelink: falsepermalink: falseexcerpt: falsecategories: falsetags: true 添加归档 在文件夹中 hexo new page archives 在主题下的 _config.yml 中添加 menu 字数/阅读时长/阅读量统计在文章标题下增加字数/阅读时长/阅读量统计这些内容。 阅读量统计阅读量统计我使用了不蒜子： 在主题下的 layout/_partial/after-footer.ejs 中最后添加代码： 1&lt;script async src=\"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; 在 after-footer 后面使用： 12本站总访问量 &lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt; 次&amp;nbsp&amp;nbsp&amp;nbsp本站访客数&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt;人次 不过我只希望在文章中添加阅读量，所以放的位置也不一样，我会把它和字数/阅读时长一起放到头部，所以稍后在字数/阅读时长的内容中一起讲。 字数/阅读时长字数和阅读时长的统计我使用了插件 hexo-wordcount。 下载 hexo-wordcount 包 1npm i --save hexo-wordcount 在主题目录下 layout/_partial/post 中新建 word.ejs 文件，把之前的阅读量统计和字数及阅读时长的内容一起放到这个文件里 123456789101112131415161718192021222324252627&lt;div style=\"margin-top:10px;font-size: 12px; color: #999;\"&gt; &lt;span class=\"post-time\"&gt; &lt;span class=\"post-meta-item-icon\"&gt; &lt;i class=\"fa fa-keyboard-o icon-acfun\" style=\"font-size: 12px;\"&gt;&lt;/i&gt; &lt;span class=\"post-meta-item-text\"&gt; 字数统计: &lt;/span&gt; &lt;span class=\"post-count\"&gt;&lt;%= wordcount(post.content) %&gt;字&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;span class=\"post-time\"&gt; &amp;nbsp; | &amp;nbsp; &lt;span class=\"post-meta-item-icon\"&gt; &lt;i class=\"fa fa-hourglass-half icon-clock\" style=\"font-size: 12px;\"&gt;&lt;/i&gt; &lt;span class=\"post-meta-item-text\"&gt; 阅读时长: &lt;/span&gt; &lt;span class=\"post-count\"&gt;&lt;%= min2read(post.content) %&gt;分&lt;/span&gt; &lt;/span&gt; &lt;/span&gt; &lt;span class=\"post-time\"&gt; &amp;nbsp; | &amp;nbsp; &lt;i class=\"icon-book\" style=\"font-size: 12px;\"&gt;&lt;/i&gt; &lt;span id=\"busuanzi_container_site_pv\"&gt; 本文总阅读量 &lt;span id=\"busuanzi_value_site_pv\"&gt;&lt;/span&gt; 次 &lt;/span&gt; &lt;/span&gt;&lt;/div&gt; 在文章中插入图片考虑到性能问题，打算把图片放到七牛云中，通过外链的形式插入。 注册七牛云，免费领取对象存储，新建存储空间（需要实名认证，包括支付宝、身份证等绑定，并且免费的话只能用测试域名，有效期30 天） 复制上传的图片外链，在文章中引入外链，居中设置宽度（默认的太大了） 123456&lt;center&gt; &lt;img src=\"外链地址\" width=\"80%\" /&gt;&lt;/center&gt; 部署 在站点 _config.yml 中配置部署 github 仓库信息 1234deploy: type: git repo: https://github.com/xxx/xxx.github.io.git branch: master 通过指令生成页面后使用指令 hexo d 部署若发生错误：Deployer not found: Git，则说明要下载 hexo-deployer-git 1npm i --save hexo-deployer-git 结束语到这里，搭建博客就结束了，内容比较简单，就是自己想要的功能可以要自己花时间去找，还有就是 markdown 的语法一定要注意空格、tab，不要有多余的空格（之前代码块一直显示错乱，找了好久才发现 ~~~ 后面多了个空格）！！！","comments":true,"tags":[{"name":"hexo","slug":"hexo","permalink":"https://gromimiss.github.io/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://gromimiss.github.io/tags/github-pages/"}]}]